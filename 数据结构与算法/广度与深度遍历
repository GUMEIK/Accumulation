# 广度遍历
```js
function wideSearch(root) {
    let coll = [];
    function temp(rootList){
        if(rootList == null || rootList.length == 0) return;
        let childList = [];
        for(let i = 0;i < rootList.length;i++){
            coll.push(rootList[i].value)
            if(rootList[i].left) childList.push(rootList[i].left);
            if(rootList[i].right) childList.push(rootList[i].right);
        }
        if(childList.length !== 0 && childList) temp(childList)
    }
    temp(root);
    return coll;
}
```
# 深度遍历(其实就是前序遍历)
# 之字形打印二叉树
```js

function wideSearch(root) {
    let coll = root || [];
    let times = 0;
    function temp(rootList){
        if(rootList == null || rootList.length == 0) return;
        let childList = [];
        for(let i = 0;i < rootList.length;i++){
            // coll.push(rootList[i].value)
            if(rootList[i].left) childList.push(rootList[i].left);
            if(rootList[i].right) childList.push(rootList[i].right);
        }
        times ++;
        //之字形打印二叉树
        if(times % 2 === 0){
            coll = coll.concat(childList.reverse())
        }else {
            coll = coll.concat(childList)
        }
        if(childList.length !== 0 && childList) temp(childList);
    }
    temp(root);
    return coll;
}
function dealResult(nodeList){
    let arr = [];
    for(let i = 0,len = nodeList.length;i < len;i++){
        arr[i] = nodeList[i].value;
    }
    return arr;
}
console.log( dealResult(wideSearch([a])))
```
```js
// 上面之字形二叉树是单个的打印出来的，也可以按照数组的方法打印出来比如：
// ['a',['c','b'],['e','d','g','f']]
// 只需要改变返回结果的处理方法就行了
//提取数组中一定属性的数据。比如：提取下面数组中的 value或者age
//[{value:1,age:12},{value:3,age:53},{value:8,age:9}]
function pureArr(nodeArr,value) {
    return nodeArr.map(function (ele,index,self) {
        if(ele.constructor != Array){
            return ele[value];
        }else {
            return pureArr(ele,value);
        }
    })
}
```